# ============================================================================
# Haven Case Management System - Spring Boot Configuration
# ============================================================================

# Application Basic Settings
spring.application.name=haven-api
server.port=${APP_PORT:8080}
server.servlet.context-path=/api
spring.profiles.active=${APP_ENV:dev}

# Proxy/Load Balancer Configuration (for deployment behind Nginx/ALB)
server.forward-headers-strategy=framework
server.tomcat.remoteip.remote-ip-header=x-forwarded-for
server.tomcat.remoteip.protocol-header=x-forwarded-proto

# ============================================================================
# Database Configuration
# ============================================================================
spring.datasource.url=jdbc:postgresql://${DB_HOST:localhost}:${DB_PORT:5432}/${DB_NAME:haven}
spring.datasource.username=${DB_USERNAME:haven}
spring.datasource.password=${DB_PASSWORD:haven}
spring.datasource.driver-class-name=org.postgresql.Driver

# Connection Pool (HikariCP)
spring.datasource.hikari.pool-name=HavenDbPool
spring.datasource.hikari.maximum-pool-size=${DB_POOL_SIZE:10}
spring.datasource.hikari.minimum-idle=5
spring.datasource.hikari.connection-timeout=${DB_CONNECTION_TIMEOUT:30000}
spring.datasource.hikari.idle-timeout=600000
spring.datasource.hikari.max-lifetime=1800000
spring.datasource.hikari.auto-commit=true

# ============================================================================
# JPA / Hibernate Configuration
# ============================================================================
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.hibernate.ddl-auto=none
spring.jpa.show-sql=false
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.properties.hibernate.use_sql_comments=false
spring.jpa.properties.hibernate.jdbc.batch_size=25
spring.jpa.properties.hibernate.order_inserts=true
spring.jpa.properties.hibernate.order_updates=true
spring.jpa.properties.hibernate.jdbc.batch_versioned_data=true
spring.jpa.properties.hibernate.generate_statistics=false
spring.jpa.open-in-view=false

# Hibernate Caching (Disabled for stateless API)
spring.jpa.properties.hibernate.cache.use_second_level_cache=false
spring.jpa.properties.hibernate.cache.use_query_cache=false
# Uncomment below if you need 2nd-level cache later
# spring.jpa.properties.hibernate.cache.region.factory_class=org.hibernate.cache.jcache.JCacheRegionFactory
# spring.jpa.properties.hibernate.javax.cache.provider=org.ehcache.jsr107.EhcacheCachingProvider

# ============================================================================
# Flyway Migration Configuration
# ============================================================================
spring.flyway.enabled=true
spring.flyway.locations=classpath:db/migration
spring.flyway.baseline-on-migrate=true
spring.flyway.baseline-version=0
spring.flyway.table=flyway_schema_history
spring.flyway.validate-on-migrate=true
spring.flyway.clean-disabled=true

# ============================================================================
# Security & OAuth2 Configuration
# ============================================================================
# OAuth2 Resource Server (Keycloak)
spring.security.oauth2.resourceserver.jwt.issuer-uri=${KEYCLOAK_URL:http://localhost:8081}/realms/${KEYCLOAK_REALM:haven}
spring.security.oauth2.resourceserver.jwt.jwk-set-uri=${KEYCLOAK_URL:http://localhost:8081}/realms/${KEYCLOAK_REALM:haven}/protocol/openid-connect/certs

# OAuth2 Client Configuration (if needed for service-to-service calls)
spring.security.oauth2.client.registration.keycloak.client-id=${KEYCLOAK_CLIENT_ID:haven-backend}
spring.security.oauth2.client.registration.keycloak.client-secret=${KEYCLOAK_CLIENT_SECRET:}
spring.security.oauth2.client.registration.keycloak.authorization-grant-type=authorization_code
spring.security.oauth2.client.registration.keycloak.scope=openid,profile,email,roles
spring.security.oauth2.client.provider.keycloak.issuer-uri=${KEYCLOAK_URL:http://localhost:8081}/realms/${KEYCLOAK_REALM:haven}
spring.security.oauth2.client.provider.keycloak.user-name-attribute=preferred_username

# ============================================================================
# CORS Configuration
# ============================================================================
app.cors.allowed-origins=${CORS_ALLOWED_ORIGINS:http://localhost:3000,http://localhost:5173}
app.cors.allowed-methods=${CORS_ALLOWED_METHODS:GET,POST,PUT,DELETE,PATCH,OPTIONS}
app.cors.allowed-headers=${CORS_ALLOWED_HEADERS:Authorization,Content-Type,X-Requested-With}
app.cors.allow-credentials=true
app.cors.max-age=3600

# ============================================================================
# Actuator & Monitoring
# ============================================================================
management.endpoints.web.exposure.include=health,info,metrics,env,flyway,loggers
management.endpoints.web.base-path=/actuator
management.endpoint.health.show-details=when-authorized
management.endpoint.health.probes.enabled=true
management.health.livenessState.enabled=true
management.health.readinessState.enabled=true
management.metrics.export.prometheus.enabled=true
management.info.git.mode=full

# ============================================================================
# Logging Configuration
# ============================================================================
logging.level.root=${LOG_LEVEL:INFO}
logging.level.org.haven=${LOG_LEVEL_APPLICATION:INFO}
logging.level.org.springframework=${LOG_LEVEL_SPRING:INFO}
logging.level.org.hibernate=${LOG_LEVEL_HIBERNATE:WARN}
logging.level.org.springframework.security=DEBUG
logging.level.org.springframework.web.cors=DEBUG

# File Logging
logging.file.path=${LOG_FILE_PATH:./logs}
logging.file.name=${logging.file.path}/${LOG_FILE_NAME:haven.log}
logging.logback.rollingpolicy.max-file-size=${LOG_MAX_FILE_SIZE:10MB}
logging.logback.rollingpolicy.max-history=${LOG_MAX_HISTORY:30}
logging.pattern.console=%clr(%d{yyyy-MM-dd HH:mm:ss.SSS}){faint} %clr(${LOG_LEVEL_PATTERN:-%5p}) %clr(${PID:- }){magenta} %clr(---){faint} %clr([%15.15t]){faint} %clr(%-40.40logger{39}){cyan} %clr(:){faint} %m%n${LOG_EXCEPTION_CONVERSION_WORD:-%wEx}
logging.pattern.file=%d{yyyy-MM-dd HH:mm:ss.SSS} ${LOG_LEVEL_PATTERN:-%5p} ${PID:- } --- [%t] %-40.40logger{39} : %m%n${LOG_EXCEPTION_CONVERSION_WORD:-%wEx}

# ============================================================================
# Jackson Configuration
# ============================================================================
spring.jackson.serialization.write-dates-as-timestamps=false
spring.jackson.serialization.indent-output=true
spring.jackson.deserialization.fail-on-unknown-properties=false
spring.jackson.default-property-inclusion=non_null
spring.jackson.time-zone=UTC

# ============================================================================
# File Upload Configuration
# ============================================================================
spring.servlet.multipart.enabled=true
spring.servlet.multipart.max-file-size=${FILE_MAX_SIZE:10MB}
spring.servlet.multipart.max-request-size=25MB
spring.servlet.multipart.file-size-threshold=2KB
app.file.storage-type=${FILE_STORAGE_TYPE:local}
app.file.storage-path=${FILE_STORAGE_PATH:./uploads}
app.file.allowed-extensions=${FILE_ALLOWED_EXTENSIONS:pdf,doc,docx,jpg,jpeg,png}

# ============================================================================
# Kafka Configuration (Optional)
# ============================================================================
spring.kafka.bootstrap-servers=${KAFKA_BOOTSTRAP_SERVERS:localhost:9092}
spring.kafka.consumer.group-id=${KAFKA_GROUP_ID:haven-group}
spring.kafka.consumer.auto-offset-reset=${KAFKA_AUTO_OFFSET_RESET:earliest}
spring.kafka.consumer.enable-auto-commit=${KAFKA_ENABLE_AUTO_COMMIT:true}
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=org.springframework.kafka.support.serializer.JsonDeserializer
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer
app.kafka.enabled=${KAFKA_ENABLED:false}

# ============================================================================
# Email Configuration
# ============================================================================
spring.mail.host=${MAIL_HOST:smtp.gmail.com}
spring.mail.port=${MAIL_PORT:587}
spring.mail.username=${MAIL_USERNAME:}
spring.mail.password=${MAIL_PASSWORD:}
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=${MAIL_USE_TLS:true}
spring.mail.properties.mail.smtp.starttls.required=true
app.mail.enabled=${MAIL_ENABLED:false}
app.mail.from=${MAIL_FROM:noreply@haven.org}

# ============================================================================
# Cache Configuration (Application-level caching, not Hibernate)
# ============================================================================
# Disabled - using stateless architecture
spring.cache.type=none
# Uncomment below if you need Spring Cache abstraction later
# spring.cache.type=jcache
# spring.cache.jcache.config=classpath:ehcache.xml
# spring.cache.cache-names=clients,cases,users,permissions

# ============================================================================
# API Documentation (Swagger/OpenAPI)
# ============================================================================
springdoc.api-docs.enabled=${SWAGGER_ENABLED:true}
springdoc.api-docs.path=/v3/api-docs
springdoc.swagger-ui.enabled=${SWAGGER_ENABLED:true}
springdoc.swagger-ui.path=/swagger-ui.html
springdoc.swagger-ui.operations-sorter=method
springdoc.swagger-ui.tags-sorter=alpha
springdoc.default-produces-media-type=application/json
springdoc.default-consumes-media-type=application/json

# ============================================================================
# Rate Limiting
# ============================================================================
app.rate-limit.enabled=${RATE_LIMIT_ENABLED:true}
app.rate-limit.requests-per-minute=${RATE_LIMIT_REQUESTS_PER_MINUTE:60}
app.rate-limit.requests-per-hour=${RATE_LIMIT_REQUESTS_PER_HOUR:1000}

# ============================================================================
# Session Management (Stateless - using JWT tokens)
# ============================================================================
spring.session.store-type=none
server.servlet.session.timeout=${SESSION_TIMEOUT:30m}
server.servlet.session.cookie.secure=${SESSION_SECURE_COOKIE:false}
server.servlet.session.cookie.same-site=${SESSION_SAME_SITE:lax}
server.servlet.session.cookie.http-only=true

# ============================================================================
# Axon Framework Configuration
# ============================================================================
# Disable AxonServer for development - use in-memory event store instead
axon.axonserver.enabled=false

# ============================================================================
# Feature Flags
# ============================================================================
app.features.audit-log=${FEATURE_AUDIT_LOG:true}
app.features.document-upload=${FEATURE_DOCUMENT_UPLOAD:false}
app.features.email-notifications=${FEATURE_EMAIL_NOTIFICATIONS:false}
app.features.sms-notifications=${FEATURE_SMS_NOTIFICATIONS:false}
app.features.advanced-reporting=${FEATURE_ADVANCED_REPORTING:false}

# ============================================================================
# Error Handling
# ============================================================================
server.error.include-message=always
server.error.include-binding-errors=always
server.error.include-stacktrace=on_param
server.error.include-exception=false

# ============================================================================
# Thread Pool Configuration
# ============================================================================
spring.task.execution.pool.core-size=8
spring.task.execution.pool.max-size=20
spring.task.execution.pool.queue-capacity=500
spring.task.execution.thread-name-prefix=haven-async-
spring.task.scheduling.pool.size=10
spring.task.scheduling.thread-name-prefix=haven-scheduled-

# ============================================================================
# Security & PII Protection Configuration
# ============================================================================
# PII Encryption Configuration
# IMPORTANT: Set this to a proper AES-256 key in production
# Generate key with: PIIEncryptionService.keyToBase64(PIIEncryptionService.generateKey())
haven.security.pii.encryption.key=${PII_ENCRYPTION_KEY:}

# Safe at Home Protection
haven.security.safe-at-home.enabled=${SAFE_AT_HOME_ENABLED:true}
haven.security.safe-at-home.require-substitute-address=${SAFE_AT_HOME_REQUIRE_SUBSTITUTE:true}

# VSP Data Access Restrictions
haven.security.vsp.hmis-access-blocked=${VSP_HMIS_ACCESS_BLOCKED:true}
haven.security.vsp.comparable-db-only=${VSP_COMPARABLE_DB_ONLY:true}

# Audit Logging for Security
haven.security.audit.pii-access-logging=${AUDIT_PII_ACCESS:true}
haven.security.audit.privileged-note-logging=${AUDIT_PRIVILEGED_NOTES:true}
haven.security.audit.encryption-access-logging=${AUDIT_ENCRYPTION_ACCESS:true}
haven.security.audit.retention-days=${AUDIT_RETENTION_DAYS:2555}

# EVID 1037.1 Compliance
haven.security.dv-counselor.require-qualification=${DV_COUNSELOR_QUALIFICATION_REQUIRED:true}
haven.security.dv-counselor.min-training-hours=${DV_COUNSELOR_MIN_TRAINING_HOURS:40}